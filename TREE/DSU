#include<bits/stdc++.h>
using namespace std;

class Disjoinset{
    
    vector<int>rank,parent;
    
    public:
    
    Disjoinset(int n){
        
        rank.resize(n+1,0);
        
        parent.resize(n+1);
        
        for(int i=0;i<=n;i++){
        
            parent[i]=i;
        
        }
    }
    int find_ultimate_parent(int node){
        
        if(node==parent[node]) return node;

        return find_ultimate_parent(parent[node]);
    }

    void Union_By_Rank(int u,int v){
        
        int ultimate_parent_U = find_ultimate_parent(u);
        
        int ultimate_parent_V = find_ultimate_parent(v);

        if(ultimate_parent_U==ultimate_parent_V) return;

        if(rank[ultimate_parent_U]<rank[ultimate_parent_V]) parent[ultimate_parent_U]=ultimate_parent_V;

        else if(rank[ultimate_parent_U]>rank[ultimate_parent_V]) parent[ultimate_parent_V]=ultimate_parent_U;

        else{

            parent[ultimate_parent_U] = ultimate_parent_V;
            
            rank[ultimate_parent_U]++;
        }
        

    }

};
int main(){
    Disjoinset ds(7);
    ds.Union_By_Rank(1,2);
    ds.Union_By_Rank(2,3);
    ds.Union_By_Rank(4,5);
    ds.Union_By_Rank(6,7);
    ds.Union_By_Rank(5,6);
    // check if 3 & 7 are connected or not
    if(ds.find_ultimate_parent(3)==ds.find_ultimate_parent(7)) cout<<"Same"<<endl;
    else cout<<"Not Same"<<endl;
    ds.Union_By_Rank(3,7);
    if(ds.find_ultimate_parent(3)==ds.find_ultimate_parent(7)) cout<<"Same"<<endl;
    else cout<<"Not Same"<<endl;

    
}
