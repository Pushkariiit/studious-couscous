#include<bits/stdc++.h>
using namespace std;
const int N = 1e5+7;
vector<int>g[N];
int parent[N];

void DFS(int v,int p=-1){
    parent[v] = p;
    for(int child:g[v]){
        if(child==p) continue;
        DFS(child,v);
    }
}

vector<int>pathfromroot(int v){
    vector<int>ans;
    while(v!=-1){
        ans.push_back(v);
        v=parent[v];
    }

    reverse(ans.begin(),ans.end());
    return ans;
}
int main(){
    int node;
    cin>>node;
    for(int i=0;i<node-1;i++){
        int n1,n2;
        cin>>n1>>n2;
        g[n1].push_back(n2);
        g[n2].push_back(n1);
    }
    DFS(1);

    int node1,node2;
    cin>>node1>>node2;

    vector<int>node1_path = pathfromroot(node1);
    vector<int>node2_path = pathfromroot(node2);

    int lca_size = min (node1_path.size(),node2_path.size());

    int lca=-1;

    for(int i=0;i<lca_size;i++){
        if(node1_path[i]==node2_path[i]){
            lca=node1_path[i];
        }
        else{
            break;
        }
    }

    cout<<lca<<endl;

}

Sample input:

13
1 2
1 3
1 13
2 5
5 6
5 7
5 8
8 12
3 4
4 9
4 10
10 11

6 9

Sample output :
1
